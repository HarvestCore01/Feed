// === main.js ===
import { createAccount, login, updateUserInfo } from './account.js';
import { sendSOL, burnTokens, autoIncreaseMarketCap, startLifeTimer, marketCap } from './market.js';
import { updateDisplay } from './ui.js';
import { checkLeaderboardUnlock, updateLeaderboard } from './leaderboard.js';

let currentUser = null;
let leaderboardUnlocked = false; // ‚úÖ Drapeau : Leaderboard initialement verrouill√©


document.addEventListener('DOMContentLoaded', () => {
  console.log("Main.js charg√© ‚úÖ");

  // ==========================
  // Gestion du Timer de Vie
  // ==========================
  startLifeTimer(updateDisplay); // Lancer le timer au d√©marrage

  // ==========================
  // Boutons
  // ==========================
  const createAccountBtn = document.getElementById('createAccount');
  const loginBtn = document.getElementById('login');
  const sendSolBtn = document.getElementById('sendSOL');
  const burnCoreBtn = document.getElementById('burnCore');

  // Cr√©ation de compte
  createAccountBtn.addEventListener('click', createAccount);


  // Login
  loginBtn.addEventListener('click', () => {
    const user = login();
    if (user) {
      currentUser = user;
      console.log("Connect√© :", currentUser);
      alert(`Bienvenue ${currentUser} !`);
      updateUserInfo(currentUser);
      localStorage.setItem("currentUser", currentUser);
      updateLeaderboard(currentUser); // Mise √† jour leaderboard d√®s connexion
    }

    // V√©rifie si un utilisateur est d√©j√† connect√© au chargement
const savedUser = localStorage.getItem("currentUser");
if (savedUser) {
  // Masquer Create Account et afficher Mon Profil
  document.getElementById('createAccount').style.display = 'none';
  document.getElementById('viewProfile').style.display = 'inline-block';
}

  });



function updateProfileLevelColor(level) {
  const profileTitle = document.querySelector('.profile-title');
  if (!profileTitle) return;

  if (level >= 10) {
    profileTitle.style.color = "#ffdd00"; // Or
    profileTitle.style.textShadow = "0 0 15px #ffdd00";
  } else if (level >= 5) {
    profileTitle.style.color = "#00ff9c"; // Vert Matrix
    profileTitle.style.textShadow = "0 0 15px #00ff9c";
  } else {
    profileTitle.style.color = "#63ffd4"; // Vert clair
    profileTitle.style.textShadow = "0 0 15px #63ffd4";
  }
}
  // Met √† jour la couleur du titre du profil toutes les 10 secondes

  // Envoi de SOL
  sendSolBtn.addEventListener('click', () => {
    if (!currentUser) {
      alert("üö´ Vous devez √™tre connect√© pour envoyer du SOL.");
      return;
    }
    sendSOL(currentUser);
    updateDisplay();
    updateUserInfo(currentUser);
    updateLeaderboard(currentUser);
  });

  // Burn des tokens
  burnCoreBtn.addEventListener('click', () => {
    if (!currentUser) {
      alert("üö´ Vous devez √™tre connect√© pour br√ªler des tokens.");
      return;
    }
    burnTokens(currentUser);
    updateDisplay();
  });

  // ==========================
  // Reconnexion automatique
  // ==========================
  const savedUser = localStorage.getItem("currentUser");
  if (savedUser) {
    currentUser = savedUser;
    updateUserInfo(currentUser);
  }

  // ==========================
  // Leaderboard LOCK logique
  // ==========================
  autoIncreaseMarketCap(() => {
    updateDisplay();

    const leaderboardSection = document.getElementById('leaderboardSection');
    const leaderboardMessage = document.getElementById('leaderboardMessage');
    const openLeaderboardBtn = document.getElementById('openLeaderboardBtn');
    const milestoneGoalEl = document.getElementById('milestoneGoal');

    // V√©rification s√©curis√©e du milestoneGoal
    if (!milestoneGoalEl) {
      console.warn("‚ö†Ô∏è milestoneGoal introuvable dans le DOM");
      return;
    }

    // Nouveau code : supprime les s√©parateurs avant conversion
const milestoneGoal = parseInt(milestoneGoalEl.textContent.replace(/\D/g, ''));


    console.log("DEBUG ‚Üí MarketCap:", marketCap, "MilestoneGoal:", milestoneGoal);

   if (!leaderboardUnlocked) {
      // Tant que le leaderboard n'a pas encore √©t√© d√©bloqu√©
      if (marketCap < milestoneGoal) {
        // Encore verrouill√©
        leaderboardSection.classList.add('locked');
        leaderboardMessage.innerHTML = `üîí D√©bloquez le leaderboard en atteignant <strong>${milestoneGoal}</strong> SOL de MarketCap.`;
        openLeaderboardBtn.onclick = () => false;
      } else {
        // D√©bloqu√© pour la premi√®re fois
        leaderboardUnlocked = true; // ‚úÖ ON NE REVIENT PLUS EN ARRI√àRE
        const leaderboardSection = document.getElementById('leaderboardSection');
leaderboardSection.classList.add('unlocked');

        leaderboardSection.classList.remove('locked');
        leaderboardMessage.innerHTML = `üéâ Le leaderboard est maintenant disponible !`;
        openLeaderboardBtn.onclick = null;
      }
    } else {
      // Leaderboard d√©j√† d√©bloqu√© ‚Üí reste ouvert quoi qu'il arrive
      leaderboardSection.classList.remove('locked');
      leaderboardMessage.innerHTML = `üéâ Le leaderboard est maintenant disponible !`;
      openLeaderboardBtn.onclick = null;
    }
  });
});
